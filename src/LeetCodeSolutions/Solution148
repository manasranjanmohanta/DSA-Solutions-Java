148. Sort LIst
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode mid = getMid(head);

        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return merge(left, right);
    }

    // To find the middle node of the linked list and dividing the list in two parts
    public ListNode getMid(ListNode head){
     ListNode prev = null, slow = head, fast = head;

            while (fast != null && fast.next != null) {
              prev = slow;
              slow = slow.next;
              fast = fast.next.next;
            }

            prev.next = null;
            return slow;
     }

    // to merge two list and  to sort
    public ListNode merge(ListNode list1, ListNode list2){
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        while(list1 != null && list2 != null){
            if(list1.val < list2.val){
                tail.next = list1;
                list1 = list1.next;
            }
            else {
                tail.next = list2;
                list2 = list2.next;
            }
               tail = tail.next;
        }

        tail.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }
}